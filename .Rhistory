## export this data frame as excel sheet
multiple_hit_choice %>% write_xlsx(path_choice_required)
multiple_hit_choice_edited <- read_xlsx(path_choice_required_edited) %>%
## selecting the choices made
filter(!is.na(Choice)) %>%
## selecting only columns needed
dplyr::select(ASV_ID, sseqid, Choice)
# Create a new edited df
Blast_GMGI_edited <- Blast_GMGI
# Loop through each row of the dataframe
for (i in multiple_hit_choice_edited$ASV_ID) {
# Extract the current row (will do this for each ASV_ID in the choice df)
current_row <- multiple_hit_choice_edited %>% subset(ASV_ID==i)
# Apply filter based on the current row's condition
Blast_GMGI_edited <- Blast_GMGI_edited %>%
filter(case_when(ASV_ID == current_row$ASV_ID ~ sseqid == current_row$sseqid,
TRUE ~ TRUE))
}
### Check the below output to confirm the filtering steps above worked (if it worked, it won't be in output)
Blast_GMGI_edited %>% group_by(ASV_ID) %>% slice_max(pident, n=1) %>% count() %>% filter(n>1)
## Create GMGI species input
disagree_input_GMGI <- Blast_GMGI_edited %>%
dplyr::select(ASV_ID, GMGI_pident = pident, GMGI_db_ID = db_percent_ID, GMGI_Species = Species_name) %>%
group_by(ASV_ID) %>% slice_max(GMGI_pident, n = 1, with_ties = FALSE) %>% ungroup()
## Create Mitofish input
disagree_input_Mito <- Blast_Mito %>%
dplyr::select(ASV_ID, Mito_Species = Species_name) %>% distinct() %>%
group_by(ASV_ID) %>% mutate(Mito_Species = paste0(Mito_Species, collapse = ";")) %>% distinct() %>% ungroup()
## Create NCBI input
disagree_input_NCBI <- Blast_NCBI %>%
dplyr::select(ASV_ID, NCBI_Species = Species_name) %>% distinct() %>%
group_by(ASV_ID) %>% mutate(NCBI_Species = paste0(NCBI_Species, collapse = ";")) %>% distinct() %>% ungroup()
## Combine all three dfs into disagree_df with ASV rank information
disagree_df <- disagree_input_GMGI %>%
full_join(disagree_input_Mito, by = "ASV_ID") %>%
full_join(disagree_input_NCBI, by = "ASV_ID") %>%
full_join(., ASV_rank_list, by = "ASV_ID") %>%
mutate(Choice = NA)
## Filtering the disagree_df to only output the entries that disagree with multiple entries
filtered_disagree_df <- disagree_df %>%
## grouping by ASV (row)
rowwise() %>%
## Filtering out rows that are unassigned across all 3 db
filter(! (is.na(GMGI_Species) && is.na(Mito_Species) && is.na(NCBI_Species) )) %>%
## Filter out rows that are GMGI assigned and empty from Mito and NCBI
filter(! (!is.na(GMGI_Species) && is.na(Mito_Species) && is.na(NCBI_Species) )) %>%
## Filtering out rows that have the same information across databases (ONLY in rows with a GMGI entry)
filter(ifelse(!is.na(GMGI_Species),
n_distinct(c_across(GMGI_Species:NCBI_Species), na.rm = TRUE) > 1, TRUE))
## export this data frame as excel sheet
filtered_disagree_df %>% write_xlsx(path_disagree_list)
ASV_table_taxID <- ASV_table %>%
## 1. Top hit from GMGI's database
left_join(Blast_GMGI_edited %>%  group_by(ASV_ID) %>%
slice_max(pident, n = 1) %>%
dplyr::select(ASV_ID, Species_name),
by = join_by(ASV_ID)) %>%
## 2. Mitofish database
### join df, select ASV_ID and Species_name columns, rename Species_name to Mito, call only distinct rows
left_join(., Blast_Mito %>% dplyr::select(ASV_ID, Mito = Species_name) %>% distinct() %>%
### group by ASV_ID, and collapse all species names separated by ;, then take only distinct rows
group_by(ASV_ID) %>% mutate(Mito = paste0(Mito, collapse = ";")) %>% distinct(), by = "ASV_ID") %>%
### if GMGI annotation is NA, then replace with Mitofish
mutate(., Species_name = ifelse(is.na(Species_name), Mito, Species_name)) %>%
## 3. NCBI database; same functions as above
left_join(., Blast_NCBI %>% dplyr::select(ASV_ID, NCBI = Species_name) %>% distinct() %>%
group_by(ASV_ID) %>% mutate(NCBI = paste0(NCBI, collapse = ";")) %>% distinct(), by = "ASV_ID") %>%
mutate(., Species_name = ifelse(is.na(Species_name), NCBI, Species_name)) %>%
## 4. if Species name is STILL not filled, call it "Unassigned"
mutate(., Species_name = ifelse(is.na(Species_name), "Unassigned", Species_name)) %>%
## removing Mito spp and NCBI spp
dplyr::select(-Mito, -NCBI) %>%
## move species name to be after ASV_ID
relocate(., c(Species_name), .after = ASV_ID)
## read in edited df
taxonomic_choice <- read_xlsx(path_disagree_list_edited) %>%
## selecting only columns needed
dplyr::select(ASV_ID, Choice)
# Create a new edited df
ASV_table_taxID_edited <- ASV_table_taxID
# Loop through each row of the dataframe
for (i in taxonomic_choice$ASV_ID) {
# Extract the current row (will do this for each ASV_ID in the choice df)
current_row <- taxonomic_choice %>% subset(ASV_ID==i)
# Apply filter based on the current row's condition
ASV_table_taxID_edited <- ASV_table_taxID_edited %>%
mutate(Species_name = case_when(
ASV_ID == current_row$ASV_ID ~ current_row$Choice,
TRUE ~ Species_name))
}
## Output will be blank
ASV_table_taxID_edited %>% dplyr::select(Species_name) %>% distinct() %>%
filter(., grepl(";", Species_name)) %>% arrange(Species_name)
### add common name column to df
ASV_table_taxID_edited <- ASV_table_taxID_edited %>%
left_join(., gmgi_db %>% dplyr::select(Species_name, Common_name, Category) %>% distinct(), by = "Species_name") %>%
relocate(., c(Common_name, Category), .after = Species_name)
### print entries with no common name
ASV_table_taxID_edited %>% dplyr::select(Species_name, Common_name) %>%
filter(is.na(Common_name)) %>% distinct() %>%
mutate(Category = NA, Kingdom = NA, Phylum = NA, Class = NA, Order = NA, Family = NA, Genus = NA, species = NA) %>%
mutate(
across(everything(), ~case_when(
Species_name == "Unassigned" ~ "Unassigned",
TRUE ~ .x
))) %>%
write_xlsx(path_commonnames_add)
## read in edited df
commonNames_annotated <- read_xlsx(path_commonnames_add_edited)
# Create a new edited df
ASV_table_taxID_annotated <- ASV_table_taxID_edited
# Loop through each row of the dataframe
for (i in commonNames_annotated$Species_name) {
# Extract the current row (will do this for each ASV_ID in the choice df)
current_row <- commonNames_annotated %>% subset(Species_name==i)
# Apply filter based on the current row's condition
ASV_table_taxID_annotated <- ASV_table_taxID_annotated %>%
mutate(Common_name = case_when(
Species_name == current_row$Species_name ~ current_row$Common_name,
TRUE ~ Common_name)) %>%
mutate(Category = case_when(
Species_name == current_row$Species_name ~ current_row$Category,
TRUE ~ Category))
}
## printing list of species name without common names
## after additions to mutate function above, this output should be zero
ASV_table_taxID_annotated %>% dplyr::select(Species_name, Common_name) %>% filter(is.na(Common_name)) %>% distinct()
ASV_table_taxID_filtered <- ASV_table_taxID_annotated %>%
## telling the df we are doing the following function by rows (ASVs)
rowwise() %>%
## filtering out any values that are less than 0.001 of the total ASV read # in each sample
mutate(across(.cols = (7:ncol(.)),
.fns = ~ ifelse((.x/ASV_sum)<0.001, NA, .x))) %>% ungroup()
## output of what we're losing
ASV_table_taxID_edited %>% rowwise() %>%
mutate(across(.cols = (7:ncol(.)),
.fns = ~ ifelse((.x/ASV_sum)>0.001, NA, .x))) %>% ungroup() %>% write_xlsx(reads_filtered_out)
## Export ASV break-down for 03-data_quality.Rmd
ASV_table_taxID_filtered %>% dplyr::select(ASV_ID, Species_name, Common_name, Category, ASV_sum, ASV_rank) %>%
write_xlsx(ASV_breakdown_sheet)
## Confirm number of samples is as expected (outputs should be the same)
ncol(ASV_table_taxID_annotated %>% dplyr::select(-ASV_ID, -Species_name, -Common_name, -Category, -ASV_sum, -ASV_rank))
ncol(ASV_table_taxID_filtered %>% dplyr::select(-ASV_ID, -Species_name, -Common_name, -Category, -ASV_sum, -ASV_rank))
ASV_table_taxID_collapsed <- ASV_table_taxID_filtered %>%
# removing original ASV_ID to collapse
dplyr::select(-ASV_ID) %>%
## group by Species_name and sample
dplyr::group_by(Species_name, Common_name, Category) %>%
## sum down column by species name and sample to collapse
dplyr::summarise(across(.cols = (1:last_col()),
.fns = ~ sum(., na.rm = TRUE)),
.groups = 'drop')
# Print number of samples
ncol(ASV_table_taxID_collapsed %>% dplyr::select(-Species_name, -Common_name, -Category))
ASV_table_taxID_collapsed <- ASV_table_taxID_filtered %>%
# removing original ASV_ID to collapse
dplyr::select(-ASV_ID, -ASV_sum, -ASV_rank) %>%
## group by Species_name and sample
dplyr::group_by(Species_name, Common_name, Category) %>%
## sum down column by species name and sample to collapse
dplyr::summarise(across(.cols = (1:last_col()),
.fns = ~ sum(., na.rm = TRUE)),
.groups = 'drop')
# Print number of samples
ncol(ASV_table_taxID_collapsed %>% dplyr::select(-Species_name, -Common_name, -Category))
## Raw reads matrix (wide format)
ASV_table_taxID_collapsed %>% write_xlsx(results_rawreads_matrix)
## Raw reads long format and filtering out entries with zero reads
ASV_table_taxID_collapsed %>%
gather("sampleID", "reads", c(4:last_col())) %>%
filter(reads > 0) %>%
left_join(., meta, by = "sampleID") %>%
write_xlsx(results_rawreads_long)
### Calculating relative abundance
df_relab <- ASV_table_taxID_collapsed %>%
gather("sampleID", "reads", 4:last_col()) %>%
group_by(sampleID) %>%
### total
mutate(sample_total = sum(reads)) %>%
group_by(sampleID, Species_name) %>%
## relab
mutate(relab = reads/sample_total) %>% ungroup() %>%
select(-reads, -sample_total)
df_relab %>%
left_join(., meta, by = "sampleID") %>%
write_xlsx(results_relab_long)
df_relab %>% spread(sampleID, relab) %>% write_xlsx(results_relab_matrix)
df <- read_xlsx("example_output/Results_relative_abundance_long_format.xlsx") %>%
mutate(across(c(relab), ~ round(.x, 5)))
df <- read_xlsx("example_output/Results_relative_abundance_long_format.xlsx") %>%
mutate(across(c(relab), ~ round(.x, 5)))
library(ggplot2) ## for plotting
library(dplyr) ## for data table manipulation
library(tidyr) ## for data table manipulation
library(readxl) ## for reading in excel files
library(stringr) ## for data transformation
library(strex) ## for data transformation
library(purrr) ## for data transformation
library(funrar) ## for make_relative()
library(tidyverse) ## for data transformation
library(naniar) ## replace_with_na_all function
library(ggh4x) ## for facet wrap options
library(tidytext)
library(forcats)
library(scales)
#remotes::install_github("davidsjoberg/ggsankey")
library(ggsankey)
df <- read_xlsx("example_output/Results_relative_abundance_long_format.xlsx") %>%
mutate(across(c(relab), ~ round(.x, 5)))
df <- read_xlsx("example_output/Results_relative_abundance_long_format.xlsx") %>%
mutate(across(c(relab), ~ round(.x, 5)))
taxlevels <- read_excel(
"C:/BoxDrive/Box/Science/Fisheries/Projects/eDNA/Metabarcoding Lab Resources/Reference Databases/GMGI_Vert_Ref.xlsx") %>%
dplyr::select("Species_name", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "species") %>%
distinct()
df_annotated <- df %>% left_join(., taxlevels, by = "Species_name")
## bringing in common names information for those not in our db
commonNames_annotated <- read_xlsx("example_output/Taxonomic_assignments/CommonNames_required_edited.xlsx")
# Loop through each row of the dataframe to add taxonomic level information from required edited worksheet
for (i in commonNames_annotated$Species_name) {
# Extract the current row (will do this for each ASV_ID in the choice df)
current_row <- commonNames_annotated %>% subset(Species_name==i)
# Apply filter based on the current row's condition
df_annotated <- df_annotated %>%
mutate(across(c(Common_name, Category, Kingdom, Phylum, Class, Order, Family, Genus, species),
~case_when(Species_name == current_row$Species_name ~ current_row[[cur_column()]],
TRUE ~ .x)))
}
## tax list
df_tax <- df_annotated %>% dplyr::select(Species_name, Kingdom:Genus) %>% distinct()
df_filtered <- df_annotated %>%
filter(!Category == "Other" & !Category == "Livestock" & !Category == "Unassigned" & !Category == "Human")
df_average <- df_annotated %>%
group_by(SampleType, Species_name) %>%
### average relative abundance by sample Type
mutate(avg_relab = mean(relab, na.rm=TRUE))
## if subset of categories is desired, replace df below with df_filtered
df_annotated %>%
## replace zeros with NAs for plotting
replace_with_na_all(condition = ~.x == 0.00000) %>%
# Create a factor for Common_name ordered by Order within each Category
group_by(Category) %>%
mutate(Common_name = factor(Common_name, levels = unique(Common_name[order(Order, desc(Common_name))]))) %>%
ungroup() %>%
## ggplot basic options (USER EDIT: X AND Y AXIS)
ggplot(., aes(x = sampleID, y = Common_name)) +
geom_tile(aes(fill = relab), color = "black") +
## x, y, and legend labels (USER EDITS IF DESIRED)
ylab("Common name") +
xlab("Site") +
labs(fill = "Relative Abundance (%)") +
## color of the tile options; direction=1 will flip the low/high (USER EDITS IF DESIRED)
scale_fill_gradient(na.value = "white", low = "lightskyblue2", high = "#0C4D66") +
## facet grid with Category and project variables
facet_grid2(Category ~ SampleType,
scales = "free", space = "free",
labeller = labeller(Category = label_wrap_gen(width = 10))) +
## graph theme options
theme_classic() +
theme(
## axis text
axis.text.x = element_text(angle = 90, size=6, color="grey25", hjust = 1),
axis.text.y = element_text(colour = 'black', size = 8),
## legend text and title
legend.text = element_text(size = 8, color="black"),
legend.title = element_text(margin = margin(t = 0, r = 0, b = 5, l = 0), size=10, color="black", face="bold"),
legend.position = c(-0.4, -0.05),
legend.key.height = unit(5, 'mm'),
legend.direction = "horizontal",
legend.key.width = unit(5, 'mm'),
legend.title.align = 0.5,
legend.title.position = "top",
## axis titles
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=14, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=14, face="bold"),
## facet wrap labels
strip.text.x = element_text(color = "black", face = "bold", size = 12),
strip.text.y = element_text(color = "black", face = "bold", size = 12, angle=0),
strip.background.y = element_blank(),
strip.clip = "off"
)
## USER EDITS WIDTH AND HEIGHT TO DESIRED
ggsave("example_output/Figures/Relative_abundance.png", width = 22, height = 14)
df_average %>%
dplyr::select(Species_name, Common_name, Category, SampleType, Kingdom:avg_relab) %>%
## replace zeros with NAs for plotting
replace_with_na_all(condition = ~.x == 0.00000) %>%
# Create a factor for Common_name ordered by Order within each Category
group_by(Category) %>%
mutate(Common_name = factor(Common_name, levels = unique(Common_name[order(Order, desc(Common_name))]))) %>%
ungroup() %>%
## ggplot basic options (USER EDIT: X AND Y AXIS)
ggplot(., aes(x = SampleType, y = Common_name)) +
geom_tile(aes(fill = avg_relab), color = "black") +
## x, y, and legend labels (USER EDITS IF DESIRED)
ylab("Common name") +
xlab("") +
labs(fill = "Relative Abundance (%)") +
## color of the tile options; direction=1 will flip the low/high (USER EDITS IF DESIRED)
scale_fill_gradient(na.value = "white", low = "lightskyblue2", high = "#0C4D66") +
## facet grid with Category and project variables
facet_grid2(Category ~ SampleType,
scales = "free", space = "free",
labeller = labeller(Category = label_wrap_gen(width = 10))) +
## graph theme options
theme_classic() +
theme(
## axis text
axis.text.x = element_text(angle = 90, size=6, color="grey25", hjust = 1),
axis.text.y = element_text(colour = 'black', size = 8),
## legend text and title
legend.text = element_text(size = 8, color="black"),
legend.title = element_text(margin = margin(t = 0, r = 0, b = 5, l = 0), size=10, color="black", face="bold"),
legend.position = c(-0.4, -0.05),
legend.key.height = unit(5, 'mm'),
legend.direction = "horizontal",
legend.key.width = unit(5, 'mm'),
legend.title.align = 0.5,
legend.title.position = "top",
## axis titles
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=14, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=14, face="bold"),
## facet wrap labels
strip.text.x = element_text(color = "black", face = "bold", size = 12),
strip.text.y = element_text(color = "black", face = "bold", size = 12, angle=0),
strip.background.y = element_blank(),
strip.clip = "off"
)
ggsave("example_output/Figures/Relative_abundance_sampletype.png", width = 7, height = 14)
top_list <- read_xlsx("example_output/Results_rawreads_long_format.xlsx") %>%
filter(!Category == "Other" & !Category == "Livestock" & !Category == "unassigned" & !Category == "Human") %>%
group_by(Species_name, Common_name) %>%
summarise(total = sum(reads),
log = log10(total),
total_M = total/1000000) %>%
arrange(desc(total)) %>%
head(30)
ggplot(top_list, aes(x = fct_reorder(Common_name, log), y = log)) +
geom_segment(aes(xend = Common_name, yend = 0), color = "#97C1DE") +  # Lollipop stick
geom_point(size = 3, shape=21, color='grey30', fill = "#97C1DE") +  # Lollipop head
coord_flip() +  # Flip coordinates for horizontal lollipop chart
labs(
x = "",
y = "Normalized Reads") +
theme_bw() +
theme(axis.text.y = element_text(size = 8, color='black'), #, face="italic"
axis.text.x = element_text(size = 6),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=10, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=10, face="bold"),
axis.text.x.top = element_text(size = 8, color='black', face="italic", angle = 45, hjust = 0)) +
scale_y_continuous(
labels = comma,
limits = c(0, max(top_list$log) + (max(top_list$log)*0.1))  # Set the upper limit to max value + 10%
)
ggsave("example_output/Figures/Top_species_log.png", width=3.5, height=6)
raw_df <- read_xlsx("example_output/Results_rawreads_long_format.xlsx") %>%
group_by(Species_name, Common_name, Category) %>%
reframe(sum = sum(reads)/1000000,
xaxis = "x") %>%
left_join(., df_tax, by = "Species_name") %>%
mutate(Target_group = case_when(
Category == "Human" ~ "Nontarget",
Category == "Other" ~ "Nontarget",
Category == "Unassigned" ~ "Nontarget",
Category == "Livestock" ~ "Nontarget",
Category == "Bird" ~ "Target1",
Category == "Elasmobranch" ~ "Target1",
Category == "Marine Mammal" ~ "Target1",
Category == "Sea Turtle" ~ "Target1",
Category == "Teleost Fish" ~ "Target2"
)) %>% filter(!Target_group == "Nontarget")
raw_df %>%
filter(!Target_group == "Nontarget") %>%
# Create a factor for Common_name ordered by Order within each Category
group_by(Category) %>%
mutate(Common_name = factor(Common_name, levels = unique(Common_name[order(Order, desc(Common_name))]))) %>%
ungroup() %>%
ggplot(., aes(x=xaxis, y=Common_name)) +
geom_point(aes(size=sum, fill=sum), color = 'black', shape=21) +
scale_fill_gradient(na.value = "white", low = "lightskyblue2", high = "#0C4D66") +
facet_grid2(Category ~ ., scales = "free", space = "free") +
theme_bw() +
labs(
x="",
y="",
fill = "Reads (M)",
size = "Reads (M)"
) +
theme(
axis.text.y = element_text(size = 8, color = 'black'),
axis.text.x = element_blank(),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=12, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=12, face="bold"),
## facet wrap labels
strip.text.x = element_text(color = "black", face = "bold", size = 12),
#strip.text.y = element_text(color = "black", face = "bold", size = 12, angle=0),
strip.text.y = element_blank(),
strip.background.y = element_blank(),
strip.clip = "off",
# Combine legends
legend.position = "right",
legend.box = "vertical"
) +
guides(
fill = "none",
size = guide_legend(order = 2, reverse = TRUE,
override.aes = list(fill = scales::seq_gradient_pal("#0C4D66", "lightskyblue2")
(seq(0, 1, length.out = 5))))
)
ggsave("example_output/Figures/Species_bubbleplot.png", width=4.5, height=16)
# Option 1: Change global options (affects all subsequent operations)
## Convert scientific notation to regular numbers
options(scipen = 999)
## Relative abundance matrix
df <- read_xlsx("example_output/Results_2_relative_abundance_matrix.xlsx") %>%
## removing common_name and category for now
dplyr::select(-Common_name, -Category) %>%
## Remove columns with NA values
dplyr::select(where(~!any(is.na(.)))) %>%
## making species_name rownames instead of column
column_to_rownames(var = "Species_name") %>%
# remove columns that sum to 0
select(where(~sum(., na.rm = TRUE) != 0))
meta <- read_xlsx("example_input/metadata.xlsx") %>%
## rownames are also needed in phyloseq meta table
mutate(sampleID2=sampleID) %>% column_to_rownames(var = "sampleID2")
## Create ASV (OTU) table and meta table
otu <- otu_table(df, taxa_are_rows = T)
library(ggplot2) ## for plotting
library(tidyverse) ## for data manipulation
library(phyloseq)
library(knitr)
library(readxl)
library(writexl)
library(cowplot)
## for stats
library(pairwiseAdonis)
library(lme4) ## for stats
library(car) ## for stats
library(stats) ## for stats
library(vegan)
library("microbiome") ## for alpha diversity functions
## set seed
set.seed(1234)
## Create ASV (OTU) table and meta table
otu <- otu_table(df, taxa_are_rows = T)
meta_phyloseq <- sample_data(meta)
## Merge metadata and OTU table into one phyloseq "object"
phylo_obj <- merge_phyloseq(otu, meta_phyloseq)
## view phyloseq obj
## expected output = otu_table() with taxa and sample numbers and sample_data() with the sample and column numbers
print(phylo_obj)
# Ensure that your OTU table doesn't contain any NA or negative values (output should be FALSE)
any(is.na(otu_table(phylo_obj)))
any(otu_table(phylo_obj) < 0)
fill_col = c("cyan4", "deeppink4", "#ed6a5a")
## Calculate
alpha_div <- estimate_richness(phylo_obj, measures = c("Shannon", "Simpson")) %>%
rownames_to_column(var = "sampleID") %>% left_join(., meta, by = "sampleID")
alpha_div %>%
gather("measurement", "value", Shannon:Simpson) %>%
ggplot(., aes(x=SampleType, y=value)) +
geom_boxplot(aes(color = SampleType), fill=NA, outlier.shape=NA, show.legend = FALSE) +
geom_jitter(width=0.2, shape=21, aes(fill = SampleType), color = 'black', alpha=0.5) +
facet_wrap(~measurement, scales = "free_y", strip.position = "left") +
## labels
labs(x="Sample Type", y="", fill = "Sample Type") +
scale_fill_manual(values = fill_col) +
scale_color_manual(values = fill_col) +
## theme options
theme_bw() +
theme(panel.background=element_blank(),
strip.background=element_blank(),
strip.text = element_text(size = 10, face="bold"),
legend.position = "none",
strip.clip = 'off',
strip.placement = "outside",
axis.text.y = element_text(size=8, color="grey30"),
axis.text.x = element_text(size=8, color="grey30"),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=10, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=10, face="bold"))
ggsave("example_output/Figures/alpha_diversity.png", width = 6, height = 4)
## Species Richness
biodiv_df <- df %>%
rownames_to_column(var = "Species_name") %>%
gather("sampleID", "relab", 2:last_col()) %>%
group_by(sampleID) %>%
summarize(richness = sum(relab > 0)) %>%
## Species Evenness ~ Shannon
left_join(., alpha_div %>% dplyr::select(sampleID, Shannon), by = "sampleID")
## Exporting data
biodiv_df %>% dplyr::rename(Richness = richness) %>% left_join(., meta, by = "sampleID") %>%
write_xlsx("example_output/Biodiversity.xlsx")
## plotting
biodiv_df %>%
ggplot(., aes(x=richness, y=Shannon)) +
geom_rect(aes(xmin = quantile(biodiv_df$richness, 0.75), xmax = Inf,
ymin = quantile(biodiv_df$Shannon, 0.75, na.rm = TRUE), ymax = Inf),
fill = "#F2F7F2", alpha = 0.15) +
geom_point(fill = "#97C1DE", color='black', shape=21, alpha=0.5, size=2) +
labs(
x = "Species Richness",
y = "Species Evenness (Shannon Index)"
) +
theme_bw() +
theme(
axis.text.y = element_text(size=8, color="grey30"),
axis.text.x = element_text(size=8, color="grey30"),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=10, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=10, face="bold")
)
ggsave("example_output/Figures/biodiversity.png", width = 5.5, height = 5)
