# Create a new edited df
ASV_table_taxID_annotated <- ASV_table_taxID_edited
# Loop through each row of the dataframe
for (i in commonNames_annotated$Species_name) {
# Extract the current row (will do this for each ASV_ID in the choice df)
current_row <- commonNames_annotated %>% subset(Species_name==i)
# Apply filter based on the current row's condition
ASV_table_taxID_annotated <- ASV_table_taxID_annotated %>%
mutate(Common_name = case_when(
Species_name == current_row$Species_name ~ current_row$Common_name,
TRUE ~ Common_name)) %>%
mutate(Category = case_when(
Species_name == current_row$Species_name ~ current_row$Category,
TRUE ~ Category))
}
## printing list of species name without common names
## after additions to mutate function above, this output should be zero
ASV_table_taxID_annotated %>% dplyr::select(Species_name, Common_name) %>% filter(is.na(Common_name)) %>% distinct()
ASV_table_taxID_filtered <- ASV_table_taxID_annotated %>%
## telling the df we are doing the following function by rows (ASVs)
rowwise() %>%
## filtering out any values that are less than 0.001 of the total ASV read # in each sample
mutate(across(.cols = (7:ncol(.)),
.fns = ~ ifelse((.x/ASV_sum)<0.001, NA, .x))) %>% ungroup()
## output of what we're losing
ASV_table_taxID_edited %>% rowwise() %>%
mutate(across(.cols = (7:ncol(.)),
.fns = ~ ifelse((.x/ASV_sum)>0.001, NA, .x))) %>% ungroup() %>% write_xlsx(reads_filtered_out)
## Export ASV break-down for 03-data_quality.Rmd
ASV_table_taxID_filtered %>% dplyr::select(ASV_ID, Species_name, Common_name, Category, ASV_sum, ASV_rank) %>%
write_xlsx(ASV_breakdown_sheet)
ASV_table_taxID_collapsed <- ASV_table_taxID_filtered %>%
# removing original ASV_ID to collapse
dplyr::select(-ASV_ID) %>%
## group by Species_name and sample
dplyr::group_by(Species_name, Common_name, Category) %>%
## sum down column by species name and sample to collapse
summarise(across(6:last_col(), ~ sum(., na.rm = TRUE))) %>% ungroup()
## Raw reads matrix (wide format)
ASV_table_taxID_collapsed %>% write_xlsx(results_rawreads_matrix)
## Raw reads long format and filtering out entries with zero reads
ASV_table_taxID_collapsed %>%
gather("sampleID", "reads", c(4:last_col())) %>%
filter(reads > 0) %>%
left_join(., meta, by = "sampleID") %>%
write_xlsx(results_rawreads_long)
### Calculating relative abundance
df_relab <- ASV_table_taxID_collapsed %>%
gather("Sample_ID", "reads", 4:last_col()) %>%
group_by(Sample_ID) %>%
### total
mutate(sample_total = sum(reads)) %>%
group_by(Sample_ID, Species_name) %>%
## relab
mutate(relab = reads/sample_total) %>% ungroup() %>%
select(-reads, -sample_total)
df_relab %>%
left_join(., meta, by = "Sample_ID") %>%
write_xlsx(results_relab_long)
df_relab
meta
### Calculating relative abundance
df_relab <- ASV_table_taxID_collapsed %>%
gather("sampleID", "reads", 4:last_col()) %>%
group_by(sampleID) %>%
### total
mutate(sample_total = sum(reads)) %>%
group_by(sampleID, Species_name) %>%
## relab
mutate(relab = reads/sample_total) %>% ungroup() %>%
select(-reads, -sample_total)
df_relab %>%
left_join(., meta, by = "sampleID") %>%
write_xlsx(results_relab_long)
df_relab %>% spread(sampleID, relab) %>% write_xlsx(results_relab_matrix)
filtering_stats <- read_tsv("example_input/overall_summary.tsv", show_col_types = FALSE) %>% dplyr::rename(sampleID = sample)
meta <- read.csv("example_input/metadata.csv", header=TRUE)
df <- full_join(filtering_stats, meta, by = "sampleID") %>%
# filtering out columns we don't need
dplyr::select(-cutadapt_reverse_complemented) %>%
# removing percentage icon from cutadapt_passing_filters_percent
mutate(cutadapt_passing_filters_percent = gsub("%", "", cutadapt_passing_filters_percent)) %>%
# confirming that all columns of interest are numerical
mutate_at(vars(2:10), as.numeric) %>%
# data transformation so all columns of interest are together
gather("measure", "value", 2:10)
head(df)
df %>%
## USER EDITS IN LINE BELOW
ggplot(., aes(x=Project, y=value)) +
## adding points in jitter format
geom_jitter(width=0.15, alpha=0.5, fill="blue3", color='black', shape=21) +
## option for additional boxplots if desired (uncomment to add)
#geom_boxplot() +
## using facet_wrap to create grid based on variables and factor() to order them in custom format
facet_wrap(~factor(measure, levels=c('cutadapt_total_processed', 'cutadapt_passing_filters',
'cutadapt_passing_filters_percent', 'DADA2_input',
'filtered', 'denoisedF', 'denoisedR', 'merged', 'nonchim')), scales = "free") +
## graph asthetics
theme_bw() +
ylab("Number of reads") +
theme(panel.background=element_rect(fill='white', colour='black'),
strip.background=element_rect(fill='white', colour='black'),
strip.text = element_text(size = 10, face="bold"),
legend.position = "right",
axis.text.y = element_text(size=7, color="grey30"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
df %>%
## USER EDITS IN LINE BELOW
ggplot(., aes(x=Project, y=value)) +
## adding points in jitter format
geom_jitter(width=0.15, alpha=0.5, fill="blue3", color='black', shape=21) +
## option for additional boxplots if desired (uncomment to add)
#geom_boxplot() +
## using facet_wrap to create grid based on variables and factor() to order them in custom format
facet_wrap(~factor(measure, levels=c('cutadapt_total_processed', 'cutadapt_passing_filters',
'cutadapt_passing_filters_percent', 'DADA2_input',
'filtered', 'denoisedF', 'denoisedR', 'merged', 'nonchim')), scales = "free") +
## graph asthetics
theme_bw() +
ylab("Number of reads") +
theme(panel.background=element_rect(fill='white', colour='black'),
strip.background=element_rect(fill='white', colour='black'),
strip.text = element_text(size = 10, face="bold"),
legend.position = "right",
axis.text.y = element_text(size=7, color="grey30"),
axis.text.x = element_text(hjust = 1),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
df %>%
## USER EDITS IN LINE BELOW
ggplot(., aes(x=Project, y=value)) +
## adding points in jitter format
geom_jitter(width=0.15, alpha=0.5, fill="blue3", color='black', shape=21) +
## option for additional boxplots if desired (uncomment to add)
#geom_boxplot() +
## using facet_wrap to create grid based on variables and factor() to order them in custom format
facet_wrap(~factor(measure, levels=c('cutadapt_total_processed', 'cutadapt_passing_filters',
'cutadapt_passing_filters_percent', 'DADA2_input',
'filtered', 'denoisedF', 'denoisedR', 'merged', 'nonchim')), scales = "free") +
## graph asthetics
theme_bw() +
ylab("Number of reads") +
theme(panel.background=element_rect(fill='white', colour='black'),
strip.background=element_rect(fill='white', colour='black'),
strip.text = element_text(size = 10, face="bold"),
legend.position = "right",
axis.text.y = element_text(size=7, color="grey30"),
#axis.text.x = element_text(hjust = 1),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
ggsave("example_output/Figures/SampleReport_FilteringStats.png", width = 10, height=8)
df %>%
subset(measure == "cutadapt_total_processed" | measure == "nonchim") %>%
## USER EDITS IN LINE BELOW
ggplot(., aes(x=measure, y=value)) +
## adding points in jitter format
geom_boxplot(outlier.shape = NA, fill=NA, aes(color = measure)) +
geom_jitter(width=0.15, shape=21, alpha=0.5, size=2.5, color = 'black', aes(fill = measure)) +
## graph asthetics
theme_bw() +
labs(
y="Number of reads",
x="Bioinformatic Step"
) +
## USER EDITS IN MANUAL CODE BELOW
# scale_color_manual(values = c("red3", "lightblue", "purple2", "gold", "green4", "black")) +
# scale_size_manual(values = c(21,17)) +
scale_fill_manual(values = c("#264653", "#2a9d8f")) +
scale_color_manual(values = c("#264653", "#2a9d8f")) +
scale_x_discrete(labels = c("cutadapt_total_processed" = "Start",
"nonchim" = "Final")) +
theme(panel.background=element_rect(fill='white', colour='black'),
strip.background=element_rect(fill='white', colour='black'),
strip.text = element_text(size = 10, face="bold"),
legend.position = "none",
axis.text.y = element_text(size=10, color="black"),
axis.text.x = element_text(size=10, color="black"),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
ggsave("example_output/Figures/SampleReport_FilteringStats_Condensed.png", width = 3, height=4)
results <- read_xlsx("example_output/Results_rawreads_long.xlsx")# %>%
results
results <- read_xlsx("example_output/Results_relab_long.xlsx") # %>%
results
results %>%
group_by(Category)
results_summary <- results %>%
group_by(Category) %>%
summarise(sum_reads = sum(reads))
results_summary <- results %>%
group_by(Category) %>%
summarise(sum_reads = sum(relab))
results_summary
results_relativeab <- read_xlsx("example_output/Results_relab_long.xlsx")
results_rawreads <- read_xlsx("example_output/Results_rawreads_long.xlsx")
results_summary <- results_rawreads %>%
group_by(Category) %>%
summarise(sum_reads = sum(reads))
results_summary
results_summary <- results_rawreads %>%
group_by(Category) %>%
summarise(sum_reads = sum(reads))
general_stats <- results %>%
group_by(Category) %>%
summarise(sum_reads = sum(reads)) %>% ungroup() %>%
mutate(total = sum(sum_reads),
percent = sum_reads/total*100) %>% dplyr::select(Category, percent) %>% distinct() %>%
## round to 2 decimal places
mutate(across(c('percent'), round, 4))
general_stats <- results_rawreads %>%
group_by(Category) %>%
summarise(sum_reads = sum(reads)) %>% ungroup() %>%
mutate(total = sum(sum_reads),
percent = sum_reads/total*100) %>% dplyr::select(Category, percent) %>% distinct() %>%
## round to 2 decimal places
mutate(across(c('percent'), round, 4))
ASV_summary <- ASV_breakdown %>%
group_by(Category) %>%
summarise(count = n_distinct(ASV_ID))
ASV_breakdown <- read_xlsx("example_output/ASV_breakdown.xlsx")
ASV_summary <- ASV_breakdown %>%
group_by(Category) %>%
summarise(count = n_distinct(ASV_ID))
species_summary <- results_rawreads %>%
group_by(Category) %>%
summarise(count = n_distinct(Species_name))
# Check how many categories
unique(results_summary$Category)
ggplot(results_rawreads, aes(y=sum_reads, x=Category)) +
geom_boxplot(outlier.shape = NA, aes(color=Category), fill=NA) +
geom_jitter(width=0.2, shape=21, color='black', fill=Category, alpha=0.5)
results_rawreads
ggplot(results_rawreads, aes(y=sum_reads, x=Category)) +
geom_boxplot(outlier.shape = NA, aes(color=Category), fill=NA) +
geom_jitter(aes(fill=Category), width=0.2, shape=21, color='black', alpha=0.5)
ggplot(results_rawreads, aes(y=reads, x=Category)) +
geom_boxplot(outlier.shape = NA, aes(color=Category), fill=NA) +
geom_jitter(aes(fill=Category), width=0.2, shape=21, color='black', alpha=0.5)
ggplot(results_rawreads, aes(y=reads, x=Category)) +
geom_boxplot(outlier.shape = NA, aes(color=Category), fill=NA) +
geom_jitter(aes(fill=Category), width=0.2, shape=21, color='black', alpha=0.5) +
scale_fill_manual(values = fill_colors) +
labs(fill = "Category") +
theme_bw() +
xlab(" Month") + ylab("Raw reads") +
theme(panel.background=element_rect(fill='white', colour='black'),
axis.text.y = element_text(size=7, color="grey30"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
fill_colors <- c("#9f040e","#e30613", "#fb747d", "#ff0000", "#03045e", "#023e8a", "#0077b6", "#0096c7", "#48cae4")
ggplot(results_rawreads, aes(y=reads, x=Category)) +
geom_boxplot(outlier.shape = NA, aes(color=Category), fill=NA) +
geom_jitter(aes(fill=Category), width=0.2, shape=21, color='black', alpha=0.5) +
scale_fill_manual(values = fill_colors) +
labs(fill = "Category") +
theme_bw() +
xlab(" Month") + ylab("Raw reads") +
theme(panel.background=element_rect(fill='white', colour='black'),
axis.text.y = element_text(size=7, color="grey30"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
ggplot(results_rawreads, aes(y=reads, x=Category)) +
geom_boxplot(outlier.shape = NA, aes(color=Category), fill=NA) +
geom_jitter(aes(fill=Category), width=0.2, shape=21, color='black', alpha=0.5) +
scale_color_manual(values = fill_colors) +
labs(color = "Category") +
theme_bw() +
xlab(" Month") + ylab("Raw reads") +
theme(panel.background=element_rect(fill='white', colour='black'),
axis.text.y = element_text(size=7, color="grey30"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
ggplot(results_rawreads, aes(y=reads, x=Category)) +
geom_boxplot(outlier.shape = NA, aes(color=Category), fill=NA) +
geom_jitter(aes(fill=Category), width=0.2, shape=21, color='black', alpha=0.5) +
scale_color_manual(values = fill_colors) +
scale_fill_manual(values = fill_colors) +
labs(color = "Category") +
theme_bw() +
xlab(" Month") + ylab("Raw reads") +
theme(panel.background=element_rect(fill='white', colour='black'),
axis.text.y = element_text(size=7, color="grey30"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
fill_colors <- c("#780000", "#c1121f", "#669bbc", "#e29578", "#ff0000",
"#03045e", "#023e8a", "#0096c7", "#48cae4")
ggplot(results_rawreads, aes(y=reads, x=Category)) +
geom_boxplot(outlier.shape = NA, aes(color=Category), fill=NA) +
geom_jitter(aes(fill=Category), width=0.2, shape=21, color='black', alpha=0.5) +
scale_color_manual(values = fill_colors) +
scale_fill_manual(values = fill_colors) +
labs(color = "Category") +
theme_bw() +
xlab(" Month") + ylab("Raw reads") +
theme(panel.background=element_rect(fill='white', colour='black'),
axis.text.y = element_text(size=7, color="grey30"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
ggplot(results_rawreads, aes(y=reads, x=Category)) +
geom_boxplot(outlier.shape = NA, aes(color=Category), fill=NA) +
geom_jitter(aes(fill=Category), width=0.2, shape=21, color='black', alpha=0.5) +
scale_color_manual(values = fill_colors) +
scale_fill_manual(values = fill_colors) +
labs(color = "Category") +
theme_bw() +
xlab(" Month") + ylab("Raw reads") +
theme(panel.background=element_rect(fill='white', colour='black'),
axis.text.y = element_text(size=7, color="grey30"),
#axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
ggplot(results_rawreads, aes(y=reads, x=Category)) +
geom_boxplot(outlier.shape = NA, aes(color=Category), fill=NA) +
geom_jitter(aes(fill=Category), width=0.2, shape=21, color='black', alpha=0.5) +
scale_color_manual(values = fill_colors) +
scale_fill_manual(values = fill_colors) +
labs(color = "Category") +
theme_bw() +
xlab(" Month") + ylab("Raw reads") +
theme(panel.background=element_rect(fill='white', colour='black'),
axis.text.y = element_text(size=7, color="grey30"),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
human <- results_rawreads %>% subset(Category == "Human")
human
results_rawreads
results_rawreads <- read_xlsx("example_output/Results_rawreads_long.xlsx") %>%
group_by(sampleID) %>%
mutate(total = sum(reads))
read_xlsx("example_output/Results_rawreads_long.xlsx") %>%
group_by(sampleID) %>%
mutate(total = sum(reads))
results <- read_xlsx("example_output/Results_rawreads_long.xlsx") %>%
group_by(sampleID) %>%
mutate(total = sum(reads)) %>%
group_by(sampleID, Species_name) %>%
mutate(relative_abundance = sum/total)
results <- read_xlsx("example_output/Results_rawreads_long.xlsx") %>%
group_by(sampleID) %>%
mutate(total = sum(reads)) %>%
group_by(sampleID, Species_name)
View(results)
results <- read_xlsx("example_output/Results_rawreads_long.xlsx") %>%
group_by(sampleID) %>%
mutate(total = sum(reads)) %>%
group_by(sampleID, Species_name) %>%
mutate(relative_abundance = reads/total)
results <- read_xlsx("example_output/Results_rawreads_long.xlsx") %>%
## calculate sum of reads
group_by(sampleID) %>%
mutate(total = sum(reads)) %>%
## calculate relative abundance
group_by(sampleID, Species_name) %>%
mutate(relative_abundance = reads/total)
human <- results %>% subset(Category == "Human")
human
results %>% subset(Category == "Human") %>% gather("measure", "value", total:relative_abundance)
results %>% subset(Category == "Human") %>% gather("measure", "value", total:relative_abundance)
ggplot(., aes(y=value, x=Category)) +
geom_boxplot(outlier.shape = NA, color="#780000", fill=NA) +
geom_jitter(fill="#780000", width=0.2, shape=21, color='black', alpha=0.5)
results %>% subset(Category == "Human") %>% gather("measure", "value", total:relative_abundance) %>%
ggplot(., aes(y=value, x=Category)) +
geom_boxplot(outlier.shape = NA, color="#780000", fill=NA) +
geom_jitter(fill="#780000", width=0.2, shape=21, color='black', alpha=0.5)
results %>% subset(Category == "Human") %>% gather("measure", "value", total:relative_abundance) %>%
ggplot(., aes(y=value, x=Category)) +
geom_boxplot(outlier.shape = NA, color="#780000", fill=NA) +
geom_jitter(fill="#780000", width=0.2, shape=21, color='black', alpha=0.5) +
scale_color_manual(values = fill_colors) +
scale_fill_manual(values = fill_colors) +
labs(color = "Category") +
theme_bw() +
theme(panel.background=element_rect(fill='white', colour='black'),
axis.text.y = element_text(size=7, color="grey30"),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
results %>% subset(Category == "Human") %>% gather("measure", "value", total:relative_abundance) %>%
ggplot(., aes(y=value, x=Category)) +
geom_boxplot(outlier.shape = NA, color="#780000", fill=NA) +
geom_jitter(fill="#780000", width=0.2, shape=21, color='black', alpha=0.5) +
scale_color_manual(values = fill_colors) +
scale_fill_manual(values = fill_colors) +
labs(
) +
theme_bw() +
theme(panel.background=element_rect(fill='white', colour='black'),
axis.text.y = element_text(size=7, color="grey30"),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_blank())
results %>% subset(Category == "Human") %>% gather("measure", "value", total:relative_abundance) %>%
ggplot(., aes(y=value, x=Category)) +
geom_boxplot(outlier.shape = NA, color="#780000", fill=NA) +
geom_jitter(fill="#780000", width=0.2, shape=21, color='black', alpha=0.5) +
scale_color_manual(values = fill_colors) +
scale_fill_manual(values = fill_colors) +
labs(
) +
theme_bw() +
theme(panel.background=element_rect(fill='white', colour='black'),
axis.text.x = element_text(size=12, color="grey30"),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_blank())
results %>% subset(Category == "Human") %>% gather("measure", "value", total:relative_abundance) %>%
ggplot(., aes(y=value, x=Category)) +
geom_boxplot(outlier.shape = NA, color="#780000", fill=NA) +
geom_jitter(fill="#780000", width=0.2, shape=21, color='black', alpha=0.5) +
scale_color_manual(values = fill_colors) +
scale_fill_manual(values = fill_colors) +
labs(
) +
theme_bw() +
theme(panel.background=element_rect(fill='white', colour='black'),
axis.text.x = element_text(size=10, color="black"),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_blank())
results %>% subset(Category == "Human") %>% gather("measure", "value", total:relative_abundance) %>%
ggplot(., aes(y=value, x=Category)) +
geom_boxplot(outlier.shape = NA, color="#780000", fill=NA) +
geom_jitter(fill="#780000", width=0.2, shape=21, color='black', alpha=0.5) +
scale_color_manual(values = fill_colors) +
scale_fill_manual(values = fill_colors) +
labs(
) +
theme_bw() +
theme(panel.background=element_rect(fill='white', colour='black'),
axis.text.x = element_blank(),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
results %>% subset(Category == "Human") %>% gather("measure", "value", total:relative_abundance) %>%
ggplot(., aes(y=value, x=Category)) +
geom_boxplot(outlier.shape = NA, color="#780000", fill=NA) +
geom_jitter(fill="#780000", width=0.2, shape=21, color='black', alpha=0.5) +
scale_color_manual(values = fill_colors) +
scale_fill_manual(values = fill_colors) +
labs(
x="Human"
) +
theme_bw() +
theme(panel.background=element_rect(fill='white', colour='black'),
axis.text.x = element_blank(),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
results %>% subset(Category == "Human") %>% gather("measure", "value", total:relative_abundance) %>%
ggplot(., aes(y=value, x=Category)) +
geom_boxplot(outlier.shape = NA, color="#780000", fill=NA) +
geom_jitter(fill="#780000", width=0.2, shape=21, color='black', alpha=0.5) +
scale_color_manual(values = fill_colors) +
scale_fill_manual(values = fill_colors) +
facet_wrap(~Category, scales = "free_y") +
labs(
x="Human"
) +
theme_bw() +
theme(panel.background=element_rect(fill='white', colour='black'),
axis.text.x = element_blank(),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
results %>% subset(Category == "Human") %>% gather("measure", "value", total:relative_abundance) %>%
ggplot(., aes(y=value, x=Category)) +
geom_boxplot(outlier.shape = NA, color="#780000", fill=NA) +
geom_jitter(fill="#780000", width=0.2, shape=21, color='black', alpha=0.5) +
scale_color_manual(values = fill_colors) +
scale_fill_manual(values = fill_colors) +
facet_wrap(~Category, scales = "free_y") +
labs(
x="Human",
y=""
) +
theme_bw() +
theme(panel.background=element_rect(fill='white', colour='black'),
axis.text.x = element_blank(),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
results %>% subset(Category == "Human") %>% gather("measure", "value", total:relative_abundance) %>%
ggplot(., aes(y=value, x=Category)) +
geom_boxplot(outlier.shape = NA, color="#780000", fill=NA) +
geom_jitter(fill="#780000", width=0.2, shape=21, color='black', alpha=0.5) +
scale_color_manual(values = fill_colors) +
scale_fill_manual(values = fill_colors) +
facet_wrap(~measure, scales = "free_y") +
labs(
x="Human",
y=""
) +
theme_bw() +
theme(panel.background=element_rect(fill='white', colour='black'),
axis.text.x = element_blank(),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
results %>% subset(Category == "Human") %>% gather("measure", "value", total:relative_abundance) %>%
ggplot(., aes(y=value, x=Category)) +
geom_boxplot(outlier.shape = NA, color="#780000", fill=NA) +
geom_jitter(fill="#780000", width=0.2, shape=21, color='black', alpha=0.5) +
scale_color_manual(values = fill_colors) +
scale_fill_manual(values = fill_colors) +
facet_wrap(~measure, scales = "free_y") +
labs(
x="",
y=""
) +
theme_bw() +
theme(panel.background=element_rect(fill='white', colour='black'),
axis.text.x = element_blank())
