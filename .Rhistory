)
ggsave("example_output/Figures/Species_bubbleplot.png", width=4.5, height=16)
# Option 1: Change global options (affects all subsequent operations)
## Convert scientific notation to regular numbers
options(scipen = 999)
## Relative abundance matrix
df <- read_xlsx("example_output/Results_2_relative_abundance_matrix.xlsx") %>%
## removing common_name and category for now
dplyr::select(-Common_name, -Category) %>%
## Remove columns with NA values
dplyr::select(where(~!any(is.na(.)))) %>%
## making species_name rownames instead of column
column_to_rownames(var = "Species_name") %>%
# remove columns that sum to 0
select(where(~sum(., na.rm = TRUE) != 0))
meta <- read_xlsx("example_input/metadata.xlsx") %>%
## rownames are also needed in phyloseq meta table
mutate(sampleID2=sampleID) %>% column_to_rownames(var = "sampleID2")
## Create ASV (OTU) table and meta table
otu <- otu_table(df, taxa_are_rows = T)
library(ggplot2) ## for plotting
library(tidyverse) ## for data manipulation
library(phyloseq)
library(knitr)
library(readxl)
library(writexl)
library(cowplot)
## for stats
library(pairwiseAdonis)
library(lme4) ## for stats
library(car) ## for stats
library(stats) ## for stats
library(vegan)
library("microbiome") ## for alpha diversity functions
## set seed
set.seed(1234)
## Create ASV (OTU) table and meta table
otu <- otu_table(df, taxa_are_rows = T)
meta_phyloseq <- sample_data(meta)
## Merge metadata and OTU table into one phyloseq "object"
phylo_obj <- merge_phyloseq(otu, meta_phyloseq)
## view phyloseq obj
## expected output = otu_table() with taxa and sample numbers and sample_data() with the sample and column numbers
print(phylo_obj)
# Ensure that your OTU table doesn't contain any NA or negative values (output should be FALSE)
any(is.na(otu_table(phylo_obj)))
any(otu_table(phylo_obj) < 0)
fill_col = c("cyan4", "deeppink4", "#ed6a5a")
## Calculate
alpha_div <- estimate_richness(phylo_obj, measures = c("Shannon", "Simpson")) %>%
rownames_to_column(var = "sampleID") %>% left_join(., meta, by = "sampleID")
alpha_div %>%
gather("measurement", "value", Shannon:Simpson) %>%
ggplot(., aes(x=SampleType, y=value)) +
geom_boxplot(aes(color = SampleType), fill=NA, outlier.shape=NA, show.legend = FALSE) +
geom_jitter(width=0.2, shape=21, aes(fill = SampleType), color = 'black', alpha=0.5) +
facet_wrap(~measurement, scales = "free_y", strip.position = "left") +
## labels
labs(x="Sample Type", y="", fill = "Sample Type") +
scale_fill_manual(values = fill_col) +
scale_color_manual(values = fill_col) +
## theme options
theme_bw() +
theme(panel.background=element_blank(),
strip.background=element_blank(),
strip.text = element_text(size = 10, face="bold"),
legend.position = "none",
strip.clip = 'off',
strip.placement = "outside",
axis.text.y = element_text(size=8, color="grey30"),
axis.text.x = element_text(size=8, color="grey30"),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=10, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=10, face="bold"))
ggsave("example_output/Figures/alpha_diversity.png", width = 6, height = 4)
## Species Richness
biodiv_df <- df %>%
rownames_to_column(var = "Species_name") %>%
gather("sampleID", "relab", 2:last_col()) %>%
group_by(sampleID) %>%
summarize(richness = sum(relab > 0)) %>%
## Species Evenness ~ Shannon
left_join(., alpha_div %>% dplyr::select(sampleID, Shannon), by = "sampleID")
## Exporting data
biodiv_df %>% dplyr::rename(Richness = richness) %>% left_join(., meta, by = "sampleID") %>%
write_xlsx("example_output/Biodiversity.xlsx")
## plotting
biodiv_df %>%
ggplot(., aes(x=richness, y=Shannon)) +
geom_rect(aes(xmin = quantile(biodiv_df$richness, 0.75), xmax = Inf,
ymin = quantile(biodiv_df$Shannon, 0.75, na.rm = TRUE), ymax = Inf),
fill = "#F2F7F2", alpha = 0.15) +
geom_point(fill = "#97C1DE", color='black', shape=21, alpha=0.5, size=2) +
labs(
x = "Species Richness",
y = "Species Evenness (Shannon Index)"
) +
theme_bw() +
theme(
axis.text.y = element_text(size=8, color="grey30"),
axis.text.x = element_text(size=8, color="grey30"),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=10, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=10, face="bold")
)
ggsave("example_output/Figures/biodiversity.png", width = 5.5, height = 5)
library(dplyr) # for data transformation
library(tidyverse) # for data transformation
library(ggplot2) # for plotting
library(readxl) ## for reading in excel files
library(viridis)
library(hrbrthemes)
library(ggrepel)
library(cowplot)
# removing scientific notation
## remove line or comment out if not desired
options(scipen=999)
### User edits:
### 1. Replace the 3 paths below: edit example_input to your project specific path
### 2. Confirm your sampleIDs match between metadata, results df, and filtering stats output
filtering_stats <- read_tsv("example_input/overall_summary.tsv", show_col_types = FALSE) %>% dplyr::rename(sampleID = sample)
meta <- read_excel("example_input/metadata.xlsx")
results <- read_xlsx("example_output/Results_rawreads_long_format.xlsx") %>%
## calculate sum of reads
group_by(sampleID) %>%
dplyr::mutate(`Number of reads` = sum(reads)) %>%
## calculate relative abundance
group_by(sampleID, Species_name) %>%
dplyr::mutate(`Relative Abundance` = reads/`Number of reads`) %>%
## factor the Category list
dplyr::mutate(Category = factor(Category, levels = c("Human", "Livestock", "Other", "Unassigned", "Bird",
"Sea Turtle", "Elasmobranch", "Marine Mammal", "Teleost Fish")))
ASV_breakdown <- read_xlsx("example_output/ASV_breakdown.xlsx") %>%
## factor the Category list
dplyr::mutate(Category = factor(Category, levels = c("Human", "Livestock", "Other", "Unassigned", "Bird",
"Sea Turtle", "Elasmobranch", "Marine Mammal", "Teleost Fish")))
df <- full_join(filtering_stats, meta, by = "sampleID") %>%
# filtering out columns we don't need
dplyr::select(-cutadapt_reverse_complemented) %>%
# removing percentage icon from cutadapt_passing_filters_percent
dplyr::mutate(cutadapt_passing_filters_percent = gsub("%", "", cutadapt_passing_filters_percent)) %>%
# confirming that all columns of interest are numerical
dplyr::mutate_at(vars(2:10), as.numeric) %>%
# data transformation so all columns of interest are together
gather("measure", "value", 2:10)
### User edits:
### 1. Change paths of output to desired folder (data/figures is suggested data structure)
### 2. Change x axis and color, size based on metadata desired
### 3. Change custom colors and sizes if desired and number of colors and sizes based on metadata variable chosen
df %>%
filter(!is.na(Month)) %>%
## USER EDITS IN LINE BELOW
ggplot(., aes(x=Month, y=value)) +
## adding points in jitter format
geom_jitter(width=0.15, alpha=0.5, fill="#0077b6", color='black', size=1, shape=21) +
## option for additional boxplots if desired (uncomment to add)
#geom_boxplot() +
## using facet_wrap to create grid based on variables and factor() to order them in custom format
facet_wrap(~factor(measure, levels=c('cutadapt_total_processed', 'cutadapt_passing_filters',
'cutadapt_passing_filters_percent', 'DADA2_input',
'filtered', 'denoisedF', 'denoisedR', 'merged', 'nonchim')), scales = "free") +
## graph asthetics
theme_bw() +
ylab("Number of reads") +
theme(panel.background=element_rect(fill='white', colour='black'),
strip.background=element_rect(fill='white', colour='black'),
strip.text = element_text(size = 10, face="bold"),
legend.position = "right",
axis.text.y = element_text(size=7, color="grey30"),
axis.text.x = element_text(angle=45, hjust=1),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
ggsave("example_output/Figures/SampleReport_FilteringStats.png", width = 11, height=9)
## Subset to start and final read counts
outliers <- df %>% subset(measure == "nonchim") %>% spread(measure, value)
## Calculate mean, standard deviation, and standard error
outlier_summary <- summarySE(outliers, measurevar = c("nonchim"))
library(dplyr) # for data transformation
library(tidyverse) # for data transformation
library(ggplot2) # for plotting
library(readxl) ## for reading in excel files
library(viridis)
library(hrbrthemes)
library(ggrepel)
library(cowplot)
library(Rmisc)
library(writexl)
# removing scientific notation
## remove line or comment out if not desired
options(scipen=999)
library(Rmisc)
## Subset to start and final read counts
outliers <- df %>% subset(measure == "nonchim") %>% spread(measure, value)
## Calculate mean, standard deviation, and standard error
outlier_summary <- summarySE(outliers, measurevar = c("nonchim"))
## Determine cutoffs based on 2 standard deviations away from the mean
cutoff_low <- outlier_summary$nonchim - (outlier_summary$sd*2)
cutoff_high <- outlier_summary$nonchim + (outlier_summary$sd*2)
## Print samples that will be labeled as outliers
outliers %>% filter(nonchim < cutoff_low)
outliers %>% filter(nonchim > cutoff_high)
### Create table of outliers and export
outlier_export <- outliers %>%
## Rename nonchim column
dplyr::rename(`Number of Filtered Reads`= nonchim) %>%
## Create lower threshold, upper threshold, and sequencing outlier columns
dplyr::mutate(`Lower Threshold` = cutoff_low,
`Upper Threshold` = cutoff_high) %>%
dplyr::mutate(`Sequencing Outlier` = case_when(
`Number of Filtered Reads` > cutoff_high ~ "Outlier",
`Number of Filtered Reads` < cutoff_low ~ "Outlier",
TRUE ~ NA
))
## Export dataframe made
outlier_export %>% write_xlsx("example_output/Results_Outliers.xlsx")
### User edits:
### 1. Change paths of output to desired folder (data/figures is suggested data structure)
### 2. Change x axis and color, size based on metadata desired
### 3. Change custom colors and sizes if desired and number of colors and sizes based on metadata variable chosen
df %>%
subset(measure == "cutadapt_total_processed" | measure == "nonchim") %>%
## USER EDITS IN LINE BELOW
ggplot(., aes(x=measure, y=value)) +
geom_hline(yintercept = cutoff_low, color = "grey80", linetype = "dashed") +
## adding points in jitter format
geom_boxplot(outlier.shape = NA, fill=NA, aes(color = measure)) +
geom_jitter(width=0.15, shape=21, alpha=0.25, size=1.5, color = 'black', aes(fill = measure)) +
## graph asthetics
theme_bw() +
labs(
y="Number of reads",
x="Bioinformatic Step"
) +
## USER EDITS IN MANUAL CODE BELOW
# scale_color_manual(values = c("red3", "lightblue", "purple2", "gold", "green4", "black")) +
# scale_size_manual(values = c(21,17)) +
scale_fill_manual(values = c("#264653", "#2a9d8f")) +
scale_color_manual(values = c("#264653", "#2a9d8f")) +
scale_x_discrete(labels = c("cutadapt_total_processed" = "Start",
"nonchim" = "Final")) +
theme(panel.background=element_rect(fill='white', colour='black'),
strip.background=element_rect(fill='white', colour='black'),
strip.text = element_text(size = 10, face="bold"),
legend.position = "none",
axis.text.y = element_text(size=10, color="black"),
axis.text.x = element_text(size=10, color="black"),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
ggsave("data/Figures/SampleReport_FilteringStats_Condensed.png", width = 4, height=4)
ggsave("example_output/SampleReport_FilteringStats_Condensed.png", width = 4, height=4)
### User edits:
### 1. Change paths of output to desired folder (data/figures is suggested data structure)
### 2. Change x axis and color, size based on metadata desired
### 3. Change custom colors and sizes if desired and number of colors and sizes based on metadata variable chosen
df %>%
subset(measure == "cutadapt_total_processed" | measure == "nonchim") %>%
## USER EDITS IN LINE BELOW
ggplot(., aes(x=measure, y=value)) +
geom_hline(yintercept = cutoff_low, color = "grey80", linetype = "dashed") +
## adding points in jitter format
geom_boxplot(outlier.shape = NA, fill=NA, aes(color = measure)) +
geom_jitter(width=0.15, shape=21, alpha=0.25, size=1.5, color = 'black', aes(fill = measure)) +
## graph asthetics
theme_bw() +
labs(
y="Number of reads",
x="Bioinformatic Step"
) +
## USER EDITS IN MANUAL CODE BELOW
# scale_color_manual(values = c("red3", "lightblue", "purple2", "gold", "green4", "black")) +
# scale_size_manual(values = c(21,17)) +
scale_fill_manual(values = c("#264653", "#2a9d8f")) +
scale_color_manual(values = c("#264653", "#2a9d8f")) +
scale_x_discrete(labels = c("cutadapt_total_processed" = "Start",
"nonchim" = "Final")) +
theme(panel.background=element_rect(fill='white', colour='black'),
strip.background=element_rect(fill='white', colour='black'),
strip.text = element_text(size = 10, face="bold"),
legend.position = "none",
axis.text.y = element_text(size=10, color="black"),
axis.text.x = element_text(size=10, color="black"),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
ggsave("example_output/SampleReport_FilteringStats_Condensed.png", width = 4, height=4)
order_vector <- c("Teleost Fish", "Marine Mammal", "Elasmobranch", "Sea Turtle", "Bird",
"Livestock", "Other", "Human", "Unassigned") # Replace with your categories
results_summary <- results %>%
group_by(Category) %>%
reframe(sum_reads = sum(reads))
general_stats <- results %>%
group_by(Category) %>%
reframe(sum_reads = sum(reads)) %>%
dplyr::mutate(total = sum(sum_reads),
percent = sum_reads/total*100) %>% dplyr::select(Category, percent) %>% distinct() %>%
## round to 2 decimal places
dplyr::mutate(across(c('percent'), round, 4))
ASV_summary <- ASV_breakdown %>%
group_by(Category) %>%
reframe(count = n_distinct(ASV_ID))
species_summary <- results %>%
group_by(Category) %>%
reframe(count = n_distinct(Species_name))
# fill_colors <- c("Human" = "#e76f51",
#                  "Livestock" = "#FF740A",
#                  "Other" = "#FE9E20",
#                  "Unassigned" = "#FFC571",
#                  "Bird" = "#FFECC2",
#                  "Sea Turtle" = "#C8D2B1",
#                  "Elasmobranch" = "#DCF1F9",
#                  "Marine Mammal" ="#8CD0EC",
#                  "Teleost Fish" = "#3FB1DE"
#                  )
fill_colors <- c("Human" = "#FE9E20",
"Livestock" = "#FCCA46",
"Other" = "#FFECC2",
"Unassigned" = "grey85",
"Bird" = "#C8D2B1",
"Sea Turtle" = "#A1C181",
"Elasmobranch" = "#97ADCB",
"Marine Mammal" ="#DCF1F9",
"Teleost Fish" = "#85B6CB"
)
results %>% group_by(sampleID, Category) %>%
reframe(group_sum = sum(reads),
group_relab = group_sum/`Number of reads`
) %>% distinct() %>%
ggplot(., aes(y=group_relab, x=Category)) +
geom_boxplot(outlier.shape = NA, aes(color=Category), fill=NA) +
geom_jitter(aes(fill=Category), width=0.2, shape=21, color='black', size = 0.75, alpha=0.35) +
scale_color_manual(values = fill_colors) +
scale_fill_manual(values = fill_colors) +
labs(color = "Category") +
scale_x_discrete(labels = scales::label_wrap(10), limits = order_vector) +
theme_bw() +
xlab("Category") + ylab("Relative abundance") +
theme(panel.background=element_rect(fill='white', colour='black'),
legend.position = "none",
axis.text.y = element_text(size=7, color="grey30"),
axis.text.x = element_text(size=7), # angle=45, hjust=1
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
ggsave("example_output/Figures/Categories_relative_abundance.png", width = 6.5, height = 4)
results %>% group_by(sampleID, Category) %>%
reframe(group_sum = sum(reads),
group_relab = group_sum/`Number of reads`
) %>% distinct() %>%
## subset to include Human and metadata
subset(Category == "Human") %>%
left_join(., meta, by = "sampleID") %>%
ggplot(., aes(x=SampleType, y=group_relab)) +
geom_boxplot(outlier.shape=NA, fill=NA, color = "#e76f51") +
geom_jitter(fill="#e76f51", shape=21, alpha=0.5, width=0.2) +
labs(
x = "Sample Type",
y = "Relative Abundance"
) +
theme_bw() +
theme(panel.background=element_rect(fill='white', colour='black'),
legend.position = "none",
axis.text.y = element_text(size=7, color="grey30"),
axis.text.x = element_text(size=7),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=11, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=11, face="bold"))
ggsave("example_output/Figures/Human.png", width=4, height=3)
### User edits:
### 1. Change paths of output to desired folder (data/figures is suggested data structure)
### 2. Change scale brewer color if desired
piechart <- general_stats %>%
dplyr::mutate(csum = rev(cumsum(rev(percent))),
pos = percent/2 + lead(csum, 1),
pos = if_else(is.na(pos), percent/2, pos)) %>%
dplyr::mutate_if(is.numeric, round, digits = 4)
unassigned_percent <- piechart %>%
filter(Category == "Unassigned") %>%
pull(percent)
general_stats %>%
ggplot(., aes(x="", y = percent, fill = Category)) +
geom_col(color = "black", width=1.25) +
geom_label_repel(data = piechart,
aes(y = pos, label = paste0(percent, "%")),
size = 3, nudge_x = 1, show.legend = FALSE) +
coord_polar(theta = "y") +
scale_fill_manual(values = fill_colors) +
theme_bw() +
# labs(
#   x = NULL, y = NULL, fill = "Category",
#      caption = paste0("Unassigned reads = ", unassigned_percent, "%")
# ) +
theme(
plot.background = element_rect(fill = "white", colour = NA),
plot.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = "pt"),
legend.position = "none",
panel.border = element_blank(),  # Remove panel border
panel.grid = element_blank(),    # Remove grid lines
axis.ticks = element_blank(),    # Remove axis ticks
axis.text = element_blank(),     # Remove axis text
axis.title = element_blank()     # Remove axis titles
) +
ggtitle("Raw reads (%)") +
xlab("") + ylab("") + labs(fill = "Category")
ggsave("example_output/Figures/Category_breakdown_percent_rawreads.png", width=4, height=3)
### User edits:
### 1. Change paths of output to desired folder (data/figures is suggested data structure)
### 2. Change scale brewer color if desired
piechart_ASV <- ASV_summary %>%
dplyr::mutate(csum = rev(cumsum(rev(count))),
pos = count/2 + lead(csum, 1),
pos = if_else(is.na(pos), count/2, pos))
ASV_summary %>%
ggplot(., aes(x="", y = count, fill = Category)) +
geom_col(color = "black", width=1.25) +
geom_label_repel(data = piechart_ASV,
aes(y = pos, label = paste0(count)),
size = 3, nudge_x = 1, show.legend = FALSE) +
coord_polar(theta = "y") +
scale_fill_manual(values = fill_colors) +
theme_bw() +
theme(
plot.background = element_rect(fill = "white", colour = NA),
plot.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = "pt"),
panel.border = element_blank(),  # Remove panel border
panel.grid = element_blank(),    # Remove grid lines
axis.ticks = element_blank(),    # Remove axis ticks
axis.text = element_blank(),     # Remove axis text
#legend.position = "none"
axis.title = element_blank()     # Remove axis titles
) +
ggtitle("Number of ASVs") +
xlab("") + ylab("") + labs(fill = "Category")
ggsave("example_output/Figures/Category_breakdown_ASVs.png", width=4, height=3)
piechart_spp <- species_summary %>%
dplyr::mutate(csum = rev(cumsum(rev(count))),
pos = count/2 + lead(csum, 1),
pos = if_else(is.na(pos), count/2, pos))
species_summary %>%
ggplot(., aes(x="", y = count, fill = Category)) +
geom_col(color = "black", width=1.25) +
geom_label_repel(data = piechart_spp,
aes(y = pos, label = paste0(count)),
size = 3, nudge_x = 1, show.legend = FALSE) +
coord_polar(theta = "y") +
scale_fill_manual(values = fill_colors) +
theme_bw() +
theme(
plot.background = element_rect(fill = "white", colour = NA),
plot.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = "pt"),
panel.border = element_blank(),  # Remove panel border
panel.grid = element_blank(),    # Remove grid lines
axis.ticks = element_blank(),    # Remove axis ticks
axis.text = element_blank(),     # Remove axis text
axis.title = element_blank()     # Remove axis titles
) +
ggtitle("Number of Taxonomic Assignments") +
xlab("") + ylab("") + labs(fill = "Category")
ggsave("example_output/Figures/Category_breakdown_species.png", width=4, height=3)
plot_grid(piechart_reads, piechart_species_plot,
ncol=2,
align = "vh"
)
piechart_reads <- general_stats %>%
ggplot(., aes(x="", y = percent, fill = Category)) +
geom_col(color = "black", width=1.25) +
geom_label_repel(data = piechart,
aes(y = pos, label = paste0(percent, "%")),
size = 3, nudge_x = 1, show.legend = FALSE) +
coord_polar(theta = "y") +
scale_fill_manual(values = fill_colors) +
theme_bw() +
# labs(
#   x = NULL, y = NULL, fill = "Category",
#      caption = paste0("Unassigned reads = ", unassigned_percent, "%")
# ) +
theme(
plot.background = element_rect(fill = "white", colour = NA),
plot.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = "pt"),
legend.position = "none",
panel.border = element_blank(),  # Remove panel border
panel.grid = element_blank(),    # Remove grid lines
axis.ticks = element_blank(),    # Remove axis ticks
axis.text = element_blank(),     # Remove axis text
axis.title = element_blank()     # Remove axis titles
) +
ggtitle("Raw reads (%)") +
xlab("") + ylab("") + labs(fill = "Category"); piechart_reads
piechart_spp <- species_summary %>%
dplyr::mutate(csum = rev(cumsum(rev(count))),
pos = count/2 + lead(csum, 1),
pos = if_else(is.na(pos), count/2, pos))
piechart_species_plot <- species_summary %>%
ggplot(., aes(x="", y = count, fill = Category)) +
geom_col(color = "black", width=1.25) +
geom_label_repel(data = piechart_spp,
aes(y = pos, label = paste0(count)),
size = 3, nudge_x = 1, show.legend = FALSE) +
coord_polar(theta = "y") +
scale_fill_manual(values = fill_colors) +
theme_bw() +
theme(
plot.background = element_rect(fill = "white", colour = NA),
plot.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = "pt"),
panel.border = element_blank(),  # Remove panel border
panel.grid = element_blank(),    # Remove grid lines
axis.ticks = element_blank(),    # Remove axis ticks
axis.text = element_blank(),     # Remove axis text
axis.title = element_blank()     # Remove axis titles
) +
ggtitle("Number of Taxonomic Assignments") +
xlab("") + ylab("") + labs(fill = "Category"); piechart_species_plot
ggsave("example_output/Figures/Category_breakdown_species.png", width=4, height=3)
plot_grid(piechart_reads, piechart_species_plot,
ncol=2,
align = "vh"
)
ggsave("example_output/Figures/Category_breakdown_contract.png", width=14, height=4)
