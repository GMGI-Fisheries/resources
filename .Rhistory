Blast_Mito <- read.table(path_blast_mito, header=F, col.names = blast_col_headers, colClasses = blast_col_classes) %>%
# renaming sseqid to species name
dplyr::rename(Species_name = sseqid) %>%
# replacing _ with spaces
mutate(Species_name = gsub("_", " ", Species_name),
## removing gb || sequence from species name
Species_name = str_after_nth(Species_name, "\\|", 2))
NCBI_taxassigned <- read.delim2(path_blast_ncbi_taxassigned, header=F, col.names = c("staxid", "Phylo")) %>%
## creating taxonomic assignment columns
separate(Phylo, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species_name"), sep = ";") %>%
## creating species column based on Species_name
mutate(., species = str_after_nth(Species_name, " ", 1))
Blast_NCBI <- read.table(path_blast_ncbi, header=F,
col.names = c("ASV_ID", "sseqid", "sscinames", "staxid", "pident", "length", "mismatch",
"gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore"),
colClasses = c(rep("character", 3), "integer", rep("numeric", 9))) %>%
left_join(., NCBI_taxassigned, by = "staxid")
ASV_table <- read_tsv(path_asv_table, show_col_types = FALSE) %>%
## calculate the sum of all reads for each ASV
mutate(., ASV_sum = rowSums(across(where(is.numeric)))) %>%
## calculate a ranking based on those sum calculated above
mutate(ASV_rank = rank(-ASV_sum, ties.method='random')) %>%
## move the sum and rank columns to after ASV_ID and arrange by rank
relocate(c(ASV_sum,ASV_rank), .after = ASV_ID) %>% arrange((ASV_rank))
## creating list of rankings
ASV_rank_list <- ASV_table %>% dplyr::select(ASV_ID, ASV_sum, ASV_rank)
multiple_hit_choice <- Blast_GMGI %>% group_by(ASV_ID) %>%
## take top percent identity hit, count the number of top hits, and filter to those with more than 1 top hit
slice_max(pident, n=1) %>% count() %>% filter(n>1) %>%
## adding BLAST_GMGI information with these ASVs and ASV rank and sum
left_join(., Blast_GMGI, by = "ASV_ID") %>%
left_join(., ASV_rank_list, by = "ASV_ID") %>%
## moving database percent ID to be next to Blast percent ID
relocate(c(db_percent_ID, ASV_sum, ASV_rank), .after = pident) %>%
## adding choice column for next steps
mutate(Choice = NA)
multiple_hit_choice
multiple_hit_choice <- Blast_GMGI %>% group_by(ASV_ID) %>%
## take top percent identity hit, count the number of top hits, and filter to those with more than 1 top hit
slice_max(pident, n=1) %>% count() %>% filter(n>1) %>%
dplyr::rename(No_tied_hits=n) %>%
## adding BLAST_GMGI information with these ASVs and ASV rank and sum
left_join(., Blast_GMGI, by = "ASV_ID") %>%
left_join(., ASV_rank_list, by = "ASV_ID") %>%
## moving database percent ID to be next to Blast percent ID
relocate(c(db_percent_ID, ASV_sum, ASV_rank), .after = pident) %>%
## adding choice column for next steps
mutate(Choice = NA)
multiple_hit_choice
View(Blast_GMGI)
ASV_table
ASV_rank_list
richness_data %>%
## decide what variables to put on your x and y-axis
ggplot(., aes(x=Month, y=richness)) +
## aes() lets you adjust fill, color, shape, etc. by variable
## outside of the aes() is one value that applies to all (e.g., size=3)
geom_jitter(aes(fill=Site), shape=21, size=3, alpha=0.6, width=0.1) +
## defining axis and legend labels
labs(
y = "Species Richness",
x = "Month",
fill = "Site"
) +
## splitting graph by a variable - if using Depth, this will split the plot into Bottom and Surface
facet_wrap(~Depth) +
theme_classic()
library(ggplot2) ## for plotting
library(tidyverse) ## for data manipulation
library(phyloseq)
library(knitr)
library(readxl)
library(writexl)
library(cowplot)
## for stats
library(pairwiseAdonis)
library(lme4) ## for stats
library(car) ## for stats
library(stats) ## for stats
library(vegan)
library("microbiome") ## for alpha diversity functions
## set seed
set.seed(1234)
example_df <- read_xlsx("Example_dataset.xlsx")
meta_data <- read_xlsx("metadata.xlsx")
combined <- example_df %>%
### change the data frame from matrix to long format
## new columns "sampleID" and "reads" starting at column 4 - last column #
gather("sampleID", "reads", 4:last_col()) %>%
## combine this datatable with the metadata information, by "sampleID" column
full_join(., meta_data, by = "sampleID")
head(example_df)
head(meta_data)
head(combined)
## unique() = find all unique instances and then count them with length()
## find this data in Species_name column of example_df
length(unique(example_df$Species_name))
richness_data <- combined %>%
### group by different variables
dplyr::group_by(sampleID, Month, Site, Depth) %>%
### removing any instances of zero reads by filtering to above zero
filter(reads > 0) %>%
## calculate species richness for each group
## n_distinct() = distinct number of species_name
summarise(
richness = n_distinct(Species_name),
.groups = "keep"
)
head(richness_data)
richness_data %>%
## decide what variables to put on your x and y-axis
ggplot(., aes(x=Month, y=richness)) +
## aes() lets you adjust fill, color, shape, etc. by variable
## outside of the aes() is one value that applies to all (e.g., size=3)
geom_jitter(aes(fill=Site), shape=21, size=3, alpha=0.6, width=0.1) +
## defining axis and legend labels
labs(
y = "Species Richness",
x = "Month",
fill = "Site"
) +
## splitting graph by a variable - if using Depth, this will split the plot into Bottom and Surface
facet_wrap(~Depth) +
theme_classic()
richness_data %>%
## decide what variables to put on your x and y-axis
ggplot(., aes(x=Month, y=richness)) +
## aes() lets you adjust fill, color, shape, etc. by variable
## outside of the aes() is one value that applies to all (e.g., size=3)
geom_jitter(aes(fill=Site), shape=21, size=3, alpha=0.6, width=0.1) +
## picking the colors yourself
scale_color_manual(values = c("darkblue", "firebrick")) +
## defining axis and legend labels
labs(
y = "Species Richness",
x = "Month",
fill = "Site"
) +
## splitting graph by a variable - if using Depth, this will split the plot into Bottom and Surface
facet_wrap(~Depth) +
theme_classic()
richness_data %>%
## decide what variables to put on your x and y-axis
ggplot(., aes(x=Month, y=richness)) +
## aes() lets you adjust fill, color, shape, etc. by variable
## outside of the aes() is one value that applies to all (e.g., size=3)
geom_jitter(aes(fill=Site), shape=21, size=3, alpha=0.6, width=0.1) +
## picking the colors yourself
scale_fill_manual(values = c("darkblue", "firebrick")) +
## defining axis and legend labels
labs(
y = "Species Richness",
x = "Month",
fill = "Site"
) +
## splitting graph by a variable - if using Depth, this will split the plot into Bottom and Surface
facet_wrap(~Depth) +
theme_classic()
richness_data %>%
## decide what variables to put on your x and y-axis
ggplot(., aes(x=Month, y=richness)) +
## aes() lets you adjust fill, color, shape, etc. by variable
## outside of the aes() is one value that applies to all (e.g., size=3)
geom_jitter(aes(fill=Site), shape=21, size=3, alpha=0.6, width=0.1) +
## picking the colors yourself
scale_fill_manual(values = c("darkblue", "firebrick")) +
#scale_color_manual(values = c("darkblue", "firebrick")) +
## defining axis and legend labels
labs(
y = "Species Richness",
x = "Month",
fill = "Site"
) +
## splitting graph by a variable - if using Depth, this will split the plot into Bottom and Surface
facet_wrap(~Depth) +
theme_classic()
richness_data %>%
## decide what variables to put on your x and y-axis
ggplot(., aes(x=Month, y=richness)) +
geom_boxplot() +
## aes() lets you adjust fill, color, shape, etc. by variable
## outside of the aes() is one value that applies to all (e.g., size=3)
geom_jitter(aes(fill=Site), shape=21, size=3, alpha=0.6, width=0.1) +
## picking the colors yourself
scale_fill_manual(values = c("darkblue", "firebrick")) +
#scale_color_manual(values = c("darkblue", "firebrick")) +
## defining axis and legend labels
labs(
y = "Species Richness",
x = "Month",
fill = "Site"
) +
## splitting graph by a variable - if using Depth, this will split the plot into Bottom and Surface
facet_wrap(~Depth) +
theme_classic()
richness_data %>%
## decide what variables to put on your x and y-axis
ggplot(., aes(x=Month, y=richness)) +
geom_boxplot(aes(color=Site), outlier.shape = NA) +
## aes() lets you adjust fill, color, shape, etc. by variable
## outside of the aes() is one value that applies to all (e.g., size=3)
geom_jitter(aes(fill=Site), shape=21, size=3, alpha=0.6, width=0.1) +
## picking the colors yourself
scale_fill_manual(values = c("darkblue", "firebrick")) +
scale_color_manual(values = c("darkblue", "firebrick")) +
## defining axis and legend labels
labs(
y = "Species Richness",
x = "Month",
fill = "Site"
) +
## splitting graph by a variable - if using Depth, this will split the plot into Bottom and Surface
facet_wrap(~Depth) +
theme_classic()
richness_data %>%
## decide what variables to put on your x and y-axis
ggplot(., aes(x=Month, y=richness)) +
geom_boxplot(aes(color=Site), outlier.shape = NA) +
## aes() lets you adjust fill, color, shape, etc. by variable
## outside of the aes() is one value that applies to all (e.g., size=3)
geom_jitter(aes(fill=Site), shape=21, size=3, alpha=0.6) +
## picking the colors yourself
scale_fill_manual(values = c("darkblue", "firebrick")) +
scale_color_manual(values = c("darkblue", "firebrick")) +
## defining axis and legend labels
labs(
y = "Species Richness",
x = "Month",
fill = "Site"
) +
## splitting graph by a variable - if using Depth, this will split the plot into Bottom and Surface
facet_wrap(~Depth) +
theme_classic()
richness_data %>%
## decide what variables to put on your x and y-axis
ggplot(., aes(x=Month, y=richness)) +
geom_boxplot(aes(color=Site), outlier.shape = NA) +
## aes() lets you adjust fill, color, shape, etc. by variable
## outside of the aes() is one value that applies to all (e.g., size=3)
geom_jitter(aes(fill=Site), shape=21, size=3, alpha=0.6, position = dodge()) +
## picking the colors yourself
scale_fill_manual(values = c("darkblue", "firebrick")) +
scale_color_manual(values = c("darkblue", "firebrick")) +
## defining axis and legend labels
labs(
y = "Species Richness",
x = "Month",
fill = "Site"
) +
## splitting graph by a variable - if using Depth, this will split the plot into Bottom and Surface
facet_wrap(~Depth) +
theme_classic()
richness_data %>%
# Decide what variables to put on your x and y-axis
ggplot(aes(x = Month, y = richness)) +
geom_boxplot(aes(color = Site), outlier.shape = NA) +
# aes() lets you adjust fill, color, shape, etc. by variable
# Outside of aes() is one value that applies to all (e.g., size = 3)
geom_jitter(aes(fill = Site), shape = 21, size = 3, alpha = 0.6,
position = position_dodge(width = 0.75)) +
# Picking the colors yourself
scale_fill_manual(values = c("darkblue", "firebrick")) +
scale_color_manual(values = c("darkblue", "firebrick")) +
# Defining axis and legend labels
labs(
y = "Species Richness",
x = "Month",
fill = "Site"
) +
# Splitting graph by a variable - if using Depth, this will split the plot into Bottom and Surface
facet_wrap(~Depth) +
theme_classic()
example_df
relative_abundance_df <- example_df %>%
### convert to long format to make calculations easier
gather("sampleID", "reads", 4:last_col())
relative_abundance_df
example_df %>%
### convert to long format to make calculations easier
gather("sampleID", "reads", 4:last_col()) %>%
## calculate total # of reads per sample
group_by(sampleID) %>%
mutate(sample_total = sum(reads)) %>%
## calculate relative abundance using the sample_total calculated above
group_by(sampleID, Species_name) %>%
mutate(relab = reads/sample_total) %>% ungroup()
relative_abundance_df <- example_df %>%
### convert to long format to make calculations easier
gather("sampleID", "reads", 4:last_col()) %>%
## calculate total # of reads per sample
group_by(sampleID) %>%
mutate(sample_total = sum(reads)) %>%
## calculate relative abundance using the sample_total calculated above
group_by(sampleID, Species_name) %>%
mutate(relab = reads/sample_total) %>% ungroup() %>%
## we don't need the reads or sample_total columns anymore so we can delete these
select(-reads, -sample_total)
relative_abundance_df
relative_abundance_df <- example_df %>%
### convert to long format to make calculations easier
gather("sampleID", "reads", 4:last_col()) %>%
## calculate total # of reads per sample
group_by(sampleID) %>%
mutate(sample_total = sum(reads)) %>%
## calculate relative abundance using the sample_total calculated above
group_by(sampleID, Species_name) %>%
mutate(relab = reads/sample_total) %>% ungroup() %>%
## we don't need the reads or sample_total columns anymore so we can delete these
select(-reads, -sample_total) %>%
## adding metadata back in
full_join(., meta_data, by = "sampleID")
relative_abundance_df
head(relative_abundance_df)
## starting with the relative_abundance_df, we want to plot
relative_abundance_df %>%
## replace zeros with NAs for plotting
replace_with_na_all(condition = ~.x == 0.00000) %>%
## plot the sampleID on the x axis and the Common name of the species on the y axis
ggplot(., aes(x = sampleID, y = Common_name)) +
## create squares for every entry that will be filled with the relative abundance value
geom_tile(aes(fill = relative_abund), color = "black") +
## x, y, and legend labels (USER EDITS IF DESIRED)
labs(
y = "Common name",
x = "Site",
fill = "Relative Abundance"
) +
## color of the tile options; direction=1 will flip the low/high (USER EDITS IF DESIRED)
scale_fill_gradient(na.value = "white", low = "lightskyblue2", high = "#0C4D66") +
## split plot for Category of organism and project variables
facet_grid2(Category ~ Site,
scales = "free", space = "free",
labeller = labeller(Category = label_wrap_gen(width = 10))) +
## graph theme options
theme_classic() +
theme(
## axis text options - change size, color, angle
axis.text.x = element_text(angle = 90, size=6, color="grey25", hjust = 1),
axis.text.y = element_text(colour = 'black', size = 8),
## legend text and title - change position of legend and legend title options
legend.text = element_text(size = 8, color="black"),
legend.title = element_text(margin = margin(t = 0, r = 0, b = 5, l = 0), size=10, color="black", face="bold"),
legend.position = c(-0.4, -0.05),
legend.key.height = unit(5, 'mm'),
legend.direction = "horizontal",
legend.key.width = unit(5, 'mm'),
legend.title.align = 0.5,
legend.title.position = "top",
## axis titles - change text size, color, face (eg bold)
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=14, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=14, face="bold"),
## facet wrap labels
strip.text.x = element_text(color = "black", face = "bold", size = 12),
strip.text.y = element_text(color = "black", face = "bold", size = 12, angle=0),
strip.background.y = element_blank(),
strip.clip = "off"
)
library(naniar) ## replace_with_na_all function
library(ggh4x) ## for facet wrap options
## starting with the relative_abundance_df, we want to plot
relative_abundance_df %>%
## replace zeros with NAs for plotting
replace_with_na_all(condition = ~.x == 0.00000) %>%
## plot the sampleID on the x axis and the Common name of the species on the y axis
ggplot(., aes(x = sampleID, y = Common_name)) +
## create squares for every entry that will be filled with the relative abundance value
geom_tile(aes(fill = relative_abund), color = "black") +
## x, y, and legend labels (USER EDITS IF DESIRED)
labs(
y = "Common name",
x = "Site",
fill = "Relative Abundance"
) +
## color of the tile options; direction=1 will flip the low/high (USER EDITS IF DESIRED)
scale_fill_gradient(na.value = "white", low = "lightskyblue2", high = "#0C4D66") +
## split plot for Category of organism and project variables
facet_grid2(Category ~ Site,
scales = "free", space = "free",
labeller = labeller(Category = label_wrap_gen(width = 10))) +
## graph theme options
theme_classic() +
theme(
## axis text options - change size, color, angle
axis.text.x = element_text(angle = 90, size=6, color="grey25", hjust = 1),
axis.text.y = element_text(colour = 'black', size = 8),
## legend text and title - change position of legend and legend title options
legend.text = element_text(size = 8, color="black"),
legend.title = element_text(margin = margin(t = 0, r = 0, b = 5, l = 0), size=10, color="black", face="bold"),
legend.position = c(-0.4, -0.05),
legend.key.height = unit(5, 'mm'),
legend.direction = "horizontal",
legend.key.width = unit(5, 'mm'),
legend.title.align = 0.5,
legend.title.position = "top",
## axis titles - change text size, color, face (eg bold)
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=14, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=14, face="bold"),
## facet wrap labels
strip.text.x = element_text(color = "black", face = "bold", size = 12),
strip.text.y = element_text(color = "black", face = "bold", size = 12, angle=0),
strip.background.y = element_blank(),
strip.clip = "off"
)
relative_abundance_df <- example_df %>%
### convert to long format to make calculations easier
gather("sampleID", "reads", 4:last_col()) %>%
## calculate total # of reads per sample
group_by(sampleID) %>%
mutate(sample_total = sum(reads)) %>%
## calculate relative abundance using the sample_total calculated above
group_by(sampleID, Species_name) %>%
mutate(relative_abund = reads/sample_total) %>% ungroup() %>%
## we don't need the reads or sample_total columns anymore so we can delete these
select(-reads, -sample_total) %>%
## adding metadata back in
full_join(., meta_data, by = "sampleID")
## starting with the relative_abundance_df, we want to plot
relative_abundance_df %>%
## replace zeros with NAs for plotting
replace_with_na_all(condition = ~.x == 0.00000) %>%
## plot the sampleID on the x axis and the Common name of the species on the y axis
ggplot(., aes(x = sampleID, y = Common_name)) +
## create squares for every entry that will be filled with the relative abundance value
geom_tile(aes(fill = relative_abund), color = "black") +
## x, y, and legend labels (USER EDITS IF DESIRED)
labs(
y = "Common name",
x = "Site",
fill = "Relative Abundance"
) +
## color of the tile options; direction=1 will flip the low/high (USER EDITS IF DESIRED)
scale_fill_gradient(na.value = "white", low = "lightskyblue2", high = "#0C4D66") +
## split plot for Category of organism and project variables
facet_grid2(Category ~ Site,
scales = "free", space = "free",
labeller = labeller(Category = label_wrap_gen(width = 10))) +
## graph theme options
theme_classic() +
theme(
## axis text options - change size, color, angle
axis.text.x = element_text(angle = 90, size=6, color="grey25", hjust = 1),
axis.text.y = element_text(colour = 'black', size = 8),
## legend text and title - change position of legend and legend title options
legend.text = element_text(size = 8, color="black"),
legend.title = element_text(margin = margin(t = 0, r = 0, b = 5, l = 0), size=10, color="black", face="bold"),
legend.position = c(-0.4, -0.05),
legend.key.height = unit(5, 'mm'),
legend.direction = "horizontal",
legend.key.width = unit(5, 'mm'),
legend.title.align = 0.5,
legend.title.position = "top",
## axis titles - change text size, color, face (eg bold)
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=14, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=14, face="bold"),
## facet wrap labels
strip.text.x = element_text(color = "black", face = "bold", size = 12),
strip.text.y = element_text(color = "black", face = "bold", size = 12, angle=0),
strip.background.y = element_blank(),
strip.clip = "off"
)
### save plot to your computer so you can see this bigger
ggave("Totalspecies.png", width=10, height=12)
### save plot to your computer so you can see this bigger
ggsave("Totalspecies.png", width=10, height=12)
### save plot to your computer so you can see this bigger
ggsave("Totalspecies.png", width=13, height=11)
## starting with the relative_abundance_df, we want to plot
relative_abundance_df %>%
## replace zeros with NAs for plotting
replace_with_na_all(condition = ~.x == 0.00000) %>%
## plot the sampleID on the x axis and the Common name of the species on the y axis
ggplot(., aes(x = sampleID, y = Common_name)) +
## create squares for every entry that will be filled with the relative abundance value
geom_tile(aes(fill = relative_abund), color = "black") +
## x, y, and legend labels (USER EDITS IF DESIRED)
labs(
y = "Common name",
x = "Sample",
fill = "Relative Abundance"
) +
## color of the tile options; direction=1 will flip the low/high (USER EDITS IF DESIRED)
scale_fill_gradient(na.value = "white", low = "lightskyblue2", high = "#0C4D66") +
## split plot for Category of organism and project variables
facet_grid2(Category ~ Site,
scales = "free", space = "free",
labeller = labeller(Category = label_wrap_gen(width = 10))) +
## graph theme options
theme_classic() +
theme(
## axis text options - change size, color, angle
axis.text.x = element_text(angle = 90, size=6, color="grey25", hjust = 1),
axis.text.y = element_text(colour = 'black', size = 8),
## legend text and title - change position of legend and legend title options
legend.text = element_text(size = 8, color="black"),
legend.title = element_text(margin = margin(t = 0, r = 0, b = 5, l = 0), size=10, color="black", face="bold"),
legend.position = "right",
legend.key.height = unit(5, 'mm'),
legend.direction = "horizontal",
legend.key.width = unit(5, 'mm'),
legend.title.align = 0.5,
legend.title.position = "top",
## axis titles - change text size, color, face (eg bold)
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=14, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=14, face="bold"),
## facet wrap labels
strip.text.x = element_text(color = "black", face = "bold", size = 12),
strip.text.y = element_text(color = "black", face = "bold", size = 12, angle=0),
strip.background.y = element_blank(),
strip.clip = "off"
)
### save plot to your computer so you can see this bigger
ggsave("Totalspecies.png", width=13, height=11)
